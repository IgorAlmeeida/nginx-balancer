version: '3'
services:

  postgres:
    image: postgres:14.1-alpine
    restart: always
    container_name: container-sql
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - '5432:5432'
    volumes: 
      - db:/var/lib/postgresql/data
      - ./db/1_create_marca.sql:/docker-entrypoint-initdb.d/1_create_marca.sql
      - ./db/2_insert_marca.sql:/docker-entrypoint-initdb.d/2_insert_marca.sql
      - ./db/3_create_categoria.sql:/docker-entrypoint-initdb.d/3_create_categoria.sql
      - ./db/4_insert_categoria.sql:/docker-entrypoint-initdb.d/4_insert_categoria.sql
      - ./db/5_create_produto.sql:/docker-entrypoint-initdb.d/5_create_produto.sql
      - ./db/6_insert_produto.sql:/docker-entrypoint-initdb.d/6_insert_produto.sql
      - ./db/7_create_produto_categoria.sql:/docker-entrypoint-initdb.d/7_create_produto_categoria.sql
      - ./db/8_insert_produto_categoria.sql:/docker-entrypoint-initdb.d/8_insert_produto_categoria.sql

    networks: 
      - minha-rede

  app1:
    build:
      context: ./api
      dockerfile: Dockerfile
    image: nodejs
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
      APP: app1
      PORT: 80
    container_name: container-app1
    links:
      - postgres
    ports:
      - "80"
    networks: 
      - minha-rede
    depends_on:
      - postgres

  app2:
    build:
      context: ./api
      dockerfile: Dockerfile
    image: nodejs
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
      APP: app2
      PORT: 80
    container_name: container-app2
    links:
      - postgres
    ports:
      - "80"
    networks: 
      - minha-rede
    depends_on:
      - postgres
          
  app3:
    build:
      context: ./api
      dockerfile: Dockerfile
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
      APP: app3
      PORT: 80
    image: nodejs
    container_name: container-app3
    links:
      - postgres
    ports:
      - "80"
    networks: 
      - minha-rede
    depends_on:
      - postgres

  nginx:
    build:
      dockerfile: ./docker/nginx.dockerfile
      context: .
    image: nginx
    container_name: container-lb
    ports:
      - "80:80"
    networks: 
      - minha-rede
    depends_on:
      - "app1"
      - "app2"
      - "app3"

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    ports: 
      - "9113:9113"
    container_name: nginx-exporter
    depends_on:
      - nginx
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command:
      - -nginx.scrape-uri
      - http://container-lb:80/metrics
    networks: 
      - minha-rede

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - "cadvisor"
    networks: 
      - minha-rede

  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    depends_on: 
        - "nginx-exporter"
    networks: 
      - minha-rede

  pushgateway:
    image: prom/pushgateway
    container_name: pushgateway
    ports:
      - 9091:9091
    networks: 
      - minha-rede

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - "prometheus"
      - "cadvisor"
    networks: 
      - minha-rede

networks: 
    minha-rede:
        driver: bridge

volumes:
  db:
    driver: local
